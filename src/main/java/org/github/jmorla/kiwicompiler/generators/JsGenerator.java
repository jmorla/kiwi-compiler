package org.github.jmorla.kiwicompiler.generators;

import org.github.jmorla.kiwicompiler.ast.Attribute;
import org.github.jmorla.kiwicompiler.ast.Segment;
import org.github.jmorla.kiwicompiler.visitor.SegmentVisitor;

import java.io.PrintWriter;
import java.io.Writer;
import java.util.*;

public class JsGenerator implements SegmentVisitor, AutoCloseable {

    private final PrintWriter out;
    private final Set<String> ids = new HashSet<>();

    public JsGenerator(Writer writer) {
        out = new PrintWriter(writer);
        printGeneratedNote();
        printReactImports();
    }
    @Override
    public void visit(Segment.TextSegment n) {}

    @Override
    public void visit(Segment.ImportDirective n) {
        out.print("import ");
        out.print(n.arg0());
        out.print(" from '");
        out.print(n.hasSingleArg() ? "./" : n.arg1());
        out.println("';");
    }

    @Override
    public void visit(Segment.RenderDirective n) {
        var element = n.element();
        var baseIdentifier = (element.identifier() + Math.abs(element.hashCode()));
        if(ids.contains(baseIdentifier)) {
            return;
        }
        ids.add(baseIdentifier);
        var elementsVarName = baseIdentifier.toLowerCase() + "_elements";
        out.print("\n");
        out.print("const ");
        out.print(elementsVarName);
        out.print(" = ");
        out.print("document.querySelectorAll('[data-kiwi-id=\"");
        out.print(baseIdentifier);
        out.println("\"]');");

        out.print("for(let element of ");
        out.print(elementsVarName);
        out.println(") {");
        if(element.hasAttributes()) {
            printProps(element.attributes());
        }
        out.println("\tconst root = createRoot(element);");
        out.print("\troot.render(");
        out.print("<");
        out.print(element.identifier());
        if(element.hasAttributes()) {
            out.print(" {...props} ");
        }
        out.println("/>);");
        out.println("}");
    }

    private void printProps (List<Attribute> attributes) {
        out.println("\tconst props = {");
        for(var attribute : attributes) {
            out.print("\t\t");
            out.print(attribute.identifier());
            out.print(": ");
            if(attribute.type().equals(Attribute.AttributeType.BOOLEAN)) {
                out.print("'true' == ");
            }
            if(attribute.type().equals(Attribute.AttributeType.NUMERIC)) {
                out.print("Number");
            }
            out.print("(element.getAttribute('data-prop-");
            out.print(attribute.identifier());
            out.println("')),");
        }
        out.println("\t};");
    }

    private void printGeneratedNote() {
        out.print("""
                /*
                    This source is generated by Kiwi-compiler
                    do not modify this code
                */
                """);
    }
    private void printReactImports() {
        out.println("import React from 'react';");
        out.println("import { createRoot } from 'react-dom/client';");
    }

    @Override
    public void close() {
        out.close();
    }
}
